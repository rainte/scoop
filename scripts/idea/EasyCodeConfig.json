{
  "author" : "Sean",
  "version" : "1.2.8",
  "userSecure" : "",
  "currTypeMapperGroupName" : "Java1.8",
  "currTemplateGroupName" : "Java1.8",
  "currColumnConfigGroupName" : "Default",
  "currGlobalConfigGroupName" : "Default",
  "typeMapper" : {
    "Java1.8" : {
      "name" : "Java1.8",
      "elementList" : [ {
        "matchType" : "REGEX",
        "columnType" : "varchar(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "char(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|medium|long)*text",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "decimal(\\(\\d+,\\d+\\))?",
        "javaType" : "java.lang.Double"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "integer",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|small|medium)*int(\\(\\d+\\))?",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int4",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int8",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "REGEX",
        "columnType" : "bigint(\\(\\d+\\))?",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "date",
        "javaType" : "java.time.LocalDate"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "datetime",
        "javaType" : "java.time.LocalDateTime"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "timestamp",
        "javaType" : "java.time.LocalDateTime"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "time",
        "javaType" : "java.time.LocalTime"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "boolean",
        "javaType" : "java.lang.Boolean"
      } ]
    }
  },
  "template" : {
    "Java1.8" : {
      "name" : "Java1.8",
      "elementList" : [ {
        "name" : "po.java",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##公共列排除\n#set($columnCache = $tableInfo.fullColumn)\n#set($temp = $tool.newHashSet(\"id\", \"status\", \"created_at\", \"updated_at\", \"created_by\", \"updated_by\", \"tenant_id\", \"is_deleted\"))\n#foreach($item in $temp)\n  #set($newList = $tool.newArrayList())\n  #foreach($column in $tableInfo.fullColumn)\n    #if($column.name!=$item)\n      ##有返回值的方法使用$tool.call消除返回值\n      $tool.call($newList.add($column))\n    #end\n  #end\n  ##重新保存\n  $tableInfo.setFullColumn($newList)\n#end\n#set($columns = $tableInfo.fullColumn)\n$tableInfo.setFullColumn($columnCache)\n\n##重写importList\n#set($importListCache = $tool.newHashSet())\n#set($temp = $tool.newHashSet())\n#foreach($column in $columns)\n  $tool.call($importListCache.add($column.type))\n  #if(!$column.type.startsWith(\"java.lang.\"))\n    ##有返回值的方法使用$tool.call消除返回值\n    $tool.call($temp.add($column.type))\n  #end\n#end\n##覆盖\n#set($importList = $temp)\n\n##保存文件（宏定义）\n#save(\"/domain/po\", \".java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"domain.po\")\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\n#set($importList = $importListCache)\nimport com.baomidou.mybatisplus.annotation.*;\nimport lombok.Data;\n\n##表注释（宏定义）\n#tableComment(\"实体类\")\n@Data\n@TableName(value = \"$!{tableInfo.obj.name}\", autoResultMap = true)\npublic class $!{tableInfo.name} extends Entity<$!{tableInfo.name}> {\n#foreach($column in $columns)\n\n  #if(${column.comment})  /** ${column.comment} */\n#end\n  #if($tableInfo.pkColumn.contains($column))\n  @TableId(value = \"$!{column.obj.name}\", type = IdType.AUTO)\n  #else\n  @TableField(\"$!{column.obj.name}\")\n  #end\n  #if($column.obj.name.equals('is_deleted'))  @TableLogic\n#end\n  private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n}"
      }, {
        "name" : "dto.java",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"DTO\")\n\n##保存文件（宏定义）\n#save(\"/domain/dto\", \"DTO.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"domain.dto\")\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\nimport java.io.Serializable;\nimport lombok.Data;\n\n##表注释（宏定义）\n#tableComment(\"传输类\")\n@Data\npublic class $!{tableName} implements Serializable {\n#foreach($column in $tableInfo.fullColumn)\n  #if(${column.comment})  // ${column.comment}\n#end\n  private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n}"
      }, {
        "name" : "queryDto.java",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"QueryDTO\")\n\n##保存文件（宏定义）\n#save(\"/domain/dto\", \"QueryDTO.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"domain.dto\")\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\nimport lombok.Data;\n\n##表注释（宏定义）\n#tableComment(\"传输类\")\n@Data\npublic class $!{tableName} extends QueryPageDTO {\n#foreach($column in $tableInfo.fullColumn)\n  #if(${column.comment})  // ${column.comment}\n#end\n  private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n}"
      }, {
        "name" : "dao.java",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Dao\")\n\n##保存文件（宏定义）\n#save(\"/dao\", \"Dao.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"dao\")\n\nimport $!{tableInfo.savePackageName}.domain.po.$!tableInfo.name;\n\n##表注释（宏定义）\n#tableComment(\"交互类\")\npublic interface $!{tableName} extends BaseDao<$!tableInfo.name> {}"
      }, {
        "name" : "service.java",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Service\")\n\n##保存文件（宏定义）\n#save(\"/service\", \"Service.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service\")\n\nimport $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;\nimport $!{tableInfo.savePackageName}.domain.po.$!tableInfo.name;\nimport org.springframework.stereotype.Service;\n\n##表注释（宏定义）\n#tableComment(\"业务类\")\n@Service\npublic class $!{tableName} extends BaseService<$!{tableInfo.name}Dao, $!tableInfo.name> {}"
      }, {
        "name" : "controller.java",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Controller\")\n\n##保存文件（宏定义）\n#save(\"/controller\", \"Controller.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"controller\")\n\nimport $!{tableInfo.savePackageName}.domain.dto.$!{tableInfo.name}DTO;\nimport $!{tableInfo.savePackageName}.domain.dto.QueryIdsDTO;\nimport $!{tableInfo.savePackageName}.domain.po.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport $!{tableInfo.savePackageName}.util.BeanUtil;\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.baomidou.mybatisplus.core.toolkit.Wrappers;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport javax.annotation.Resource;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n##表注释（宏定义）\n#tableComment(\"控制器\")\n@RestController\n@RequestMapping(\"/$tool.firstLowerCase($!tableInfo.name)\")\npublic class $!{tableName} {\n\n  @Resource private $!{tableInfo.name}Service $tool.firstLowerCase($!tableInfo.name)Service;\n\n  @PostMapping(\"/add\")\n  public $!{tableInfo.name}DTO add(@RequestBody $!{tableInfo.name}DTO dto) {\n    $!{tableInfo.name} bean = BeanUtil.copy(dto, $!{tableInfo.name}.class);\n    $tool.firstLowerCase($!tableInfo.name)Service.save(bean);\n\n    $!{tableInfo.name}DTO res = new $!{tableInfo.name}DTO();\n    res.setId(bean.getId());\n    return res;\n  }\n\n  @PostMapping(\"/get\")\n  public $!{tableInfo.name}DTO get(@RequestBody $!{tableInfo.name}DTO dto) {\n    $!{tableInfo.name} bean = $tool.firstLowerCase($!tableInfo.name)Service.getById(dto.getId());\n    return BeanUtil.copy(bean, $!{tableInfo.name}DTO.class);\n  }\n\n  @PostMapping(\"/set\")\n  public void set(@RequestBody $!{tableInfo.name}DTO dto) {\n    $!{tableInfo.name} bean = BeanUtil.copy(dto, $!{tableInfo.name}.class);\n    $tool.firstLowerCase($!tableInfo.name)Service.updateById(bean);\n  }\n\n  @PostMapping(\"/del\")\n  public void del(@RequestBody QueryIdsDTO dto) {\n    $tool.firstLowerCase($!tableInfo.name)Service.removeBatchByIds(dto.getIds());\n  }\n\n  @PostMapping(\"/list\")\n  public List<$!{tableInfo.name}DTO> list(@RequestBody $!{tableInfo.name}DTO dto) {\n    LambdaQueryWrapper<$!{tableInfo.name}> wrapper =\n        Wrappers.<$!{tableInfo.name}>lambdaQuery()\n            .eq($!{tableInfo.name}::getId, dto.getId())\n            .orderByDesc($!{tableInfo.name}::getId);\n    List<$!{tableInfo.name}> list = $tool.firstLowerCase($!tableInfo.name)Service.list(wrapper);\n\n    return list.stream()\n        .map(item -> BeanUtil.copy(item, $!{tableInfo.name}DTO.class))\n        .collect(Collectors.toList());\n  }\n\n  @PostMapping(\"/query\")\n  public IPage<$!{tableInfo.name}DTO> query(@RequestBody $!{tableInfo.name}DTO dto) {\n    LambdaQueryWrapper<$!{tableInfo.name}> wrapper =\n        Wrappers.<$!{tableInfo.name}>lambdaQuery()\n            .eq($!{tableInfo.name}::getId, dto.getId())\n            .orderByDesc($!{tableInfo.name}::getId);\n    IPage<$!{tableInfo.name}> page =\n        $tool.firstLowerCase($!tableInfo.name)Service.page(new Page<>(dto.getId(), dto.getId()), wrapper);\n\n    IPage<$!{tableInfo.name}DTO> res = new Page<>(page.getCurrent(), page.getSize(), page.getTotal());\n    res.setPages(page.getPages());\n    res.setRecords(\n        page.getRecords().stream()\n            .map(item -> BeanUtil.copy(item, $!{tableInfo.name}DTO.class))\n            .collect(Collectors.toList()));\n    return res;\n  }\n}"
      } ]
    }
  },
  "columnConfig" : { },
  "globalConfig" : { }
}